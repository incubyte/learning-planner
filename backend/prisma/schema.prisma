generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  Employee
  Admin
}

model User {
  id           String       @id @default(uuid())
  eId          String?      @unique
  firstName    String?
  lastName     String?
  role         String?
  clientTeam   String?
  projectTeam  String?
  email        String       @unique
  password     String
  profilePhoto String
  roles        userRoles    @default(Employee)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  UserCourse   UserCourse[]
}

model ForgotPassword {
  id    Int    @id @default(autoincrement())
  email String
  token String
}

model Course {
  id           String       @id @default(uuid())
  name         String       @unique()
  resourseUrls String[]
  testUrls     String[]
  imageUrl     String
  credit       Float
  description  String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  UserCourse   UserCourse[]
  CourseTag    CourseTag[]
}

model Tag {
  id        Int         @id @default(autoincrement())
  name      String
  CourseTag CourseTag[]
}

model CourseTag {
  id       Int    @id @default(autoincrement())
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  tagId    Int
  tag      Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
}

model UserCourse {
  id          Int     @id @default(autoincrement())
  userId      String
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId    String
  course      Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  isCompleted Boolean
  Assignee    String @default("self")
}

enum userRoles {
  Admin
  Employee
}
